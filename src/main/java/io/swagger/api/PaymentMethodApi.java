/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.54).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.model.PaymentMethod;
import io.swagger.model.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2024-05-27T06:11:57.478186861Z[GMT]")
@Validated
public interface PaymentMethodApi {

    @Operation(summary = "add Payment Method", description = "add Payment Method", tags={ "developers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Payment Method added successfully"),
        
        @ApiResponse(responseCode = "400", description = "invalid input, object invalid"),
        
        @ApiResponse(responseCode = "409", description = "same Payment Method already exists") })
    @RequestMapping(value = "/PaymentMethod",
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<Void> addPaymentMethod(@Parameter(in = ParameterIn.DEFAULT, description = "user information", schema=@Schema()) @Valid @RequestBody PaymentMethod body
);


    @Operation(summary = "query Payment Method", description = "query PaymentMethod", tags={ "developers" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "successful", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = User.class)))),
        
        @ApiResponse(responseCode = "400", description = "bad input parameter") })
    @RequestMapping(value = "/PaymentMethod",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> queryPaymentMethod(@NotNull @Parameter(in = ParameterIn.QUERY, description = "PaymentMethod id" ,required=true,schema=@Schema()) @Valid @RequestParam(value = "PaymentMethodId", required = true) String paymentMethodId
);

}

